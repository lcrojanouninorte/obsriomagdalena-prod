import { CombinationOperator, Operator, Filter } from 'geostyler-style';
declare type PatternName = 'PROPERTY' | 'COMPARISON' | 'VALUE' | 'LOGICAL' | 'LPAREN' | 'RPAREN' | 'SPATIAL' | 'NOT' | 'BETWEEN' | 'GEOMETRY' | 'END' | 'COMMA' | 'IS_NULL';
declare type Pattern = RegExp | Function;
declare type PatternsObject = {
    [name: string]: Pattern;
};
declare type FollowsObject = {
    [name: string]: PatternName[];
};
declare type CqlOperator = '=' | '<>' | '<' | '<=' | '>' | '>=' | 'LIKE' | 'BETWEEN' | 'IS NULL';
declare type OperatorsMap = {
    [cqlOperator: string]: Operator;
};
declare type CombinationOperatorsMap = {
    [cqlOperator: string]: CombinationOperator;
};
declare type OperatorsReverseMap = {
    [cqlOperator: string]: CqlOperator;
};
declare type CombinationOperatorsReverseMap = {
    [cqlOperator: string]: 'AND' | 'OR';
};
declare type PrecedenceMap = {
    [name: string]: 1 | 2 | 3;
};
declare type Token = {
    type: string;
    text: string;
    remainder: string;
};
export declare class CqlParser {
    tokens: PatternName[];
    patterns: PatternsObject;
    follows: FollowsObject;
    operatorsMap: OperatorsMap;
    operatorReverseMap: OperatorsReverseMap;
    combinationOperatorsMap: CombinationOperatorsMap;
    combinationOperatorsReverseMap: CombinationOperatorsReverseMap;
    precedence: PrecedenceMap;
    constructor();
    tryToken(text: any, pattern: Pattern): any;
    nextToken(text: any, patternNames: PatternName[]): Token;
    tokenize(text: string): Token[];
    buildAst(tokens: Token[]): any;
    read(text: string | undefined): Filter | undefined;
    write(filter: Filter | undefined, isChild?: boolean): string | undefined;
}
export default CqlParser;
